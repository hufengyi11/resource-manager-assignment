// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package resource_manager_assignment

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AssignmentServiceClient is the client API for AssignmentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AssignmentServiceClient interface {
	CreateAssignment(ctx context.Context, in *CreateAssignmentReq, opts ...grpc.CallOption) (*CreateAssignmentRes, error)
	ReadByPeopleAssignment(ctx context.Context, in *ReadAssignmentByPeopleReq, opts ...grpc.CallOption) (*ReadAssignmentByPeopleRes, error)
	ReadByProjectAssignment(ctx context.Context, in *ReadAssignmentByProjectReq, opts ...grpc.CallOption) (*ReadAssignmentByProjectRes, error)
	UpdateAssignment(ctx context.Context, in *UpdateAssignmentReq, opts ...grpc.CallOption) (*UpdateAssignmentRes, error)
	DeleteAssignment(ctx context.Context, in *DeleteAssignmentReq, opts ...grpc.CallOption) (*DeleteAssignmentRes, error)
}

type assignmentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAssignmentServiceClient(cc grpc.ClientConnInterface) AssignmentServiceClient {
	return &assignmentServiceClient{cc}
}

func (c *assignmentServiceClient) CreateAssignment(ctx context.Context, in *CreateAssignmentReq, opts ...grpc.CallOption) (*CreateAssignmentRes, error) {
	out := new(CreateAssignmentRes)
	err := c.cc.Invoke(ctx, "/AssignmentService/CreateAssignment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assignmentServiceClient) ReadByPeopleAssignment(ctx context.Context, in *ReadAssignmentByPeopleReq, opts ...grpc.CallOption) (*ReadAssignmentByPeopleRes, error) {
	out := new(ReadAssignmentByPeopleRes)
	err := c.cc.Invoke(ctx, "/AssignmentService/ReadByPeopleAssignment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assignmentServiceClient) ReadByProjectAssignment(ctx context.Context, in *ReadAssignmentByProjectReq, opts ...grpc.CallOption) (*ReadAssignmentByProjectRes, error) {
	out := new(ReadAssignmentByProjectRes)
	err := c.cc.Invoke(ctx, "/AssignmentService/ReadByProjectAssignment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assignmentServiceClient) UpdateAssignment(ctx context.Context, in *UpdateAssignmentReq, opts ...grpc.CallOption) (*UpdateAssignmentRes, error) {
	out := new(UpdateAssignmentRes)
	err := c.cc.Invoke(ctx, "/AssignmentService/UpdateAssignment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assignmentServiceClient) DeleteAssignment(ctx context.Context, in *DeleteAssignmentReq, opts ...grpc.CallOption) (*DeleteAssignmentRes, error) {
	out := new(DeleteAssignmentRes)
	err := c.cc.Invoke(ctx, "/AssignmentService/DeleteAssignment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AssignmentServiceServer is the server API for AssignmentService service.
// All implementations must embed UnimplementedAssignmentServiceServer
// for forward compatibility
type AssignmentServiceServer interface {
	CreateAssignment(context.Context, *CreateAssignmentReq) (*CreateAssignmentRes, error)
	ReadByPeopleAssignment(context.Context, *ReadAssignmentByPeopleReq) (*ReadAssignmentByPeopleRes, error)
	ReadByProjectAssignment(context.Context, *ReadAssignmentByProjectReq) (*ReadAssignmentByProjectRes, error)
	UpdateAssignment(context.Context, *UpdateAssignmentReq) (*UpdateAssignmentRes, error)
	DeleteAssignment(context.Context, *DeleteAssignmentReq) (*DeleteAssignmentRes, error)
	mustEmbedUnimplementedAssignmentServiceServer()
}

// UnimplementedAssignmentServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAssignmentServiceServer struct {
}

func (UnimplementedAssignmentServiceServer) CreateAssignment(context.Context, *CreateAssignmentReq) (*CreateAssignmentRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAssignment not implemented")
}
func (UnimplementedAssignmentServiceServer) ReadByPeopleAssignment(context.Context, *ReadAssignmentByPeopleReq) (*ReadAssignmentByPeopleRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadByPeopleAssignment not implemented")
}
func (UnimplementedAssignmentServiceServer) ReadByProjectAssignment(context.Context, *ReadAssignmentByProjectReq) (*ReadAssignmentByProjectRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadByProjectAssignment not implemented")
}
func (UnimplementedAssignmentServiceServer) UpdateAssignment(context.Context, *UpdateAssignmentReq) (*UpdateAssignmentRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAssignment not implemented")
}
func (UnimplementedAssignmentServiceServer) DeleteAssignment(context.Context, *DeleteAssignmentReq) (*DeleteAssignmentRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAssignment not implemented")
}
func (UnimplementedAssignmentServiceServer) mustEmbedUnimplementedAssignmentServiceServer() {}

// UnsafeAssignmentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AssignmentServiceServer will
// result in compilation errors.
type UnsafeAssignmentServiceServer interface {
	mustEmbedUnimplementedAssignmentServiceServer()
}

func RegisterAssignmentServiceServer(s grpc.ServiceRegistrar, srv AssignmentServiceServer) {
	s.RegisterService(&AssignmentService_ServiceDesc, srv)
}

func _AssignmentService_CreateAssignment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAssignmentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssignmentServiceServer).CreateAssignment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AssignmentService/CreateAssignment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssignmentServiceServer).CreateAssignment(ctx, req.(*CreateAssignmentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssignmentService_ReadByPeopleAssignment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadAssignmentByPeopleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssignmentServiceServer).ReadByPeopleAssignment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AssignmentService/ReadByPeopleAssignment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssignmentServiceServer).ReadByPeopleAssignment(ctx, req.(*ReadAssignmentByPeopleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssignmentService_ReadByProjectAssignment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadAssignmentByProjectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssignmentServiceServer).ReadByProjectAssignment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AssignmentService/ReadByProjectAssignment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssignmentServiceServer).ReadByProjectAssignment(ctx, req.(*ReadAssignmentByProjectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssignmentService_UpdateAssignment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAssignmentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssignmentServiceServer).UpdateAssignment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AssignmentService/UpdateAssignment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssignmentServiceServer).UpdateAssignment(ctx, req.(*UpdateAssignmentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssignmentService_DeleteAssignment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAssignmentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssignmentServiceServer).DeleteAssignment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AssignmentService/DeleteAssignment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssignmentServiceServer).DeleteAssignment(ctx, req.(*DeleteAssignmentReq))
	}
	return interceptor(ctx, in, info, handler)
}

// AssignmentService_ServiceDesc is the grpc.ServiceDesc for AssignmentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AssignmentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "AssignmentService",
	HandlerType: (*AssignmentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAssignment",
			Handler:    _AssignmentService_CreateAssignment_Handler,
		},
		{
			MethodName: "ReadByPeopleAssignment",
			Handler:    _AssignmentService_ReadByPeopleAssignment_Handler,
		},
		{
			MethodName: "ReadByProjectAssignment",
			Handler:    _AssignmentService_ReadByProjectAssignment_Handler,
		},
		{
			MethodName: "UpdateAssignment",
			Handler:    _AssignmentService_UpdateAssignment_Handler,
		},
		{
			MethodName: "DeleteAssignment",
			Handler:    _AssignmentService_DeleteAssignment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "assignment.proto",
}
